{
    "version": "https://jsonfeed.org/version/1",
    "title": "Tech Bites",
    "description": "",
    "home_page_url": "https://www.marcpires.dev",
    "feed_url": "https://www.marcpires.dev/feed.json",
    "user_comment": "",
    "author": {
        "name": "Marc Pires"
    },
    "items": [
        {
            "id": "https://www.marcpires.dev/gitops-e-certificacoes-argocd-2/",
            "url": "https://www.marcpires.dev/gitops-e-certificacoes-argocd-2/",
            "title": "GitOps e certificações ArgoCD",
            "summary": "Olá, como vai? Voltando com carga total nos artigos e nada melhor que iniciar com revisitando uma série sobre GitOps que originalmente havia sido publicada em 2022 no Dev.to. De lá para cá, muita coisa aconteceu no mundo GitOps e era hora de atualizar essa&hellip;",
            "content_html": "<p>Olá, como vai? Voltando com carga total nos artigos e nada melhor que iniciar com revisitando uma série sobre GitOps que originalmente havia sido publicada em 2022 no Dev.to. De lá para cá, muita coisa aconteceu no mundo GitOps e era hora de atualizar essa série, começando pelo artigo original.<br><br>#argocd #gitops #certicações<br><br></p>\n<h2><a name=\"o-que-%C3%A9-gitops-\" href=\"https://dev.to/marcpires/gitops-e-certificacoes-argocd-2dgd#o-que-%C3%A9-gitops-\"></a>O que é GitOps ?</h2>\n<p>O conceito de <em>GitOps</em> é bastente simples e consiste em utilizar o <em>Git</em> como a única fonte da verdade relativo estado da nossa infra ou deployments. Apesar de a grande parte dos artigos mostrarem a utilização de GitOps para controlar as cargas de trabalho em um cluster <em>Kunernetes</em>, ele não é exclusivo do mesmo - apesar do Kubernetes possuir algumas características que tornam a implementação desta abordagem mais fácil.</p>\n<p>Alguns exemplos do que podemos fazer com <em>GitOps</em>.</p>\n<ul>\n<li>Gerenciar micro vms com Firecracker e Ignite</li>\n<li>Gerenciar nossa infra estrutura nos provedores de cloud, etc</li>\n</ul>\n<p>Neste momento, creio que alguns já devem ter pensado:</p>\n<blockquote>\n<p>Hum, eu já faço GitOps, pois tenho os meus manifestos das minhas aplicações criadas utilizando Helm ou usando Kustomize - no caso do Kubernetes -, esses manifestos passam pelo processo de pull request e review e depois o meu sistema de CI/CD excuta o <em><code>kubectl apply</code></em> e pronto. GitOps !!!</p>\n</blockquote>\n<p>Bem, você já está no caminho certo para adotar <em>GitOps</em>, mas o problema aqui é justamente a última parte do processo. Vamos analisar</p>\n<h2><a name=\"push-deployments\" href=\"https://dev.to/marcpires/gitops-e-certificacoes-argocd-2dgd#push-deployments\"></a>Push deployments</h2>\n<p>Na descrição do processo acima, veja que estamos utilizando o que chamo de <strong>push deployment</strong> ou seja, a sua ferramenta de CI/CD é que está aplicando os manifestos em um determinado cluster. Funciona, mas temos algumas questões aqui:</p>\n<ol>\n<li>\n<p>O sistema de CI precisa ter acesso ao(s) cluster(s) Kubernetes e devemos tratar de forma adequada a forma como essas credenciais são utilizados a fim de evitar problemas de segurança</p>\n</li>\n<li>\n<p>Um desenvolvedor com acesso ao(s) cluster(s) poderia aplicar uma atualizar, executando o kubectl localmente e neste situação teríamos um <em>configuration drift</em> - o seu repositório já não reflete o estado atual do cluster.</p>\n</li>\n<li>\n<p>O cluster é totalmente alheio da origem destes deployments, o que significa por exemplo que caso precise testar uma aplicação em um determinado <em>namespace</em>, mas o seu sistema de CI/CD só aplicar os manifestos quando os commits estiverem na main por exemplo, o cluster não possui formas de saber que essa aplicação deveria estar presente.</p>\n</li>\n<li>\n<p><strong>Nota</strong>: O item 3 pode ser facilmente remediado tendo um job que executa a aplicação dos manifestos sempre que uma branch seja criada. Mas isso ainda não é GitOps<br><br>imagem</p>\n<h2><a name=\"pull-deployments\" href=\"https://dev.to/marcpires/gitops-e-certificacoes-argocd-2dgd#pull-deployments\"></a>Pull Deployments</h2>\n<p>Já quando adotamos <em>GitOps</em>, essa inteligência está no próprio cluster. Por si só o _Kubernetes _não sabe como realizar esta operação, por isso precisamos ter um _Controller _no cluster que adicione essa capacidade. E é isso que as ferramentas como o ArgoCD - e o Flux - fazem. Agora temos o seguinte cenário:</p>\n<ol>\n<li>\n<p>O sistema de CI/CD não precisa mais ter acesso aos clusters, ficando responsável agora por apenas criar nossas imagens Docker e enviar para os respectivos <em>registries</em></p>\n</li>\n<li>\n<p>Todos os tokens e demais credenciais para acessar o repositório estão no cluster como <em>Secrets</em>, etc.</p>\n</li>\n<li>\n<p>Após a instalação do <em>ArgoCD</em>, o cluster agora sabe exatamente qual deve ser o estado corrente baseado em seu repositório, conseguinda assim manter a consistência.</p>\n</li>\n<li>\n<p>Não há necessidade de realizar <code>kubectl apply</code> localmente, mas mesmo que realizemos, o cluster agora poderá realizar rollbacks automaticamente, pois o repositório é a <strong>única</strong> fonte da verdade sobre o estado do cluster.<br><br>imagem</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>Como vimos acima, GitOps é uma forma bastante poderosa de gerenciarmos as aplicações e o próprio cluster. Nos próximos artigos abordarei com mais ênfase outros tópicos interessantes sobre tema.</p>\n<h2><a name=\"certifi%C3%A7%C3%B5es-argocd\" href=\"https://dev.to/marcpires/gitops-e-certificacoes-argocd-2dgd#certifi%C3%A7%C3%B5es-argocd\"></a>Certificações ArgoCD</h2>\n<p>A Coderesh lançou 3 cursos e certificação de GitOpscom Argo que até 2022 estava gratuita. Vejamos qual o conteúdo abordado em cada módulo, como são as provas e como se preparar</p>\n<h3><a name=\"gitops-fundamentals\" href=\"https://dev.to/marcpires/gitops-e-certificacoes-argocd-2dgd#gitops-fundamentals\"></a>GitOps Fundamentals</h3>\n<p>Apresenta os fundamentos do GitOps e aborda:</p>\n<ul>\n<li>O que é GitOps</li>\n<li>ArgoCD basics: <em>Instalação</em>, <em>criação de aplicações</em>, <em>estratégias de sincronização</em>, <em>gerenciamento de segredos</em>, <em>deploy com Helm e Kustomize</em>, <em>progressive delivery</em>, etc</li>\n</ul>\n<h3><a name=\"gitops-at-scale\" href=\"https://dev.to/marcpires/gitops-e-certificacoes-argocd-2dgd#gitops-at-scale\"></a>GitOps at Scale</h3>\n<p>Os temas abordados neste módulo são:</p>\n<ul>\n<li>Gerenciamento de múltiplas aplicações</li>\n<li>Gerenciamento multi cluster</li>\n<li>Generators</li>\n<li>Sync/Phase hooks e Sync Waves</li>\n<li>Sync/Diff strategies</li>\n<li>Sync Windows</li>\n</ul>\n<h3>GitOps Enterprise</h3>\n<p>Aborda tópicos mais avançados em GitOps como:</p>\n<ul>\n<li>Multi-tenant environments</li>\n<li>Preview environments via Pull request </li>\n</ul>\n<h3><a name=\"labs\" href=\"https://dev.to/marcpires/gitops-e-certificacoes-argocd-2dgd#labs\"></a>Labs</h3>\n<p>Os três cursos apresentam diversos laboratórios para a aplicação dos conceitos apresentados. Nesta etapa, sugiro que faça todos os exercícios usando um fork do repositório que a Codefresh disponibiliza, assim quando quiser reproduzir os experimentos em outro cluster, todo o código estará atualizado.<br><br>Além de realizar as tarefas dos laboratórios, experimente bastante com as diversas configurações possíveis de cada item e sua utilização.</p>\n<p>No curso de fundamentos, são apresentadas dicas de como resolver os exercícios,já no módulo <em>GitOps at Scale</em>, não são apresentadas dicas para auxiliar o aluno na resolução.</p>\n<h3><a name=\"discord\" href=\"https://dev.to/marcpires/gitops-e-certificacoes-argocd-2dgd#discord\"></a>Discord</h3>\n<p>A Codefresh disponibiliza um servidor onde pode-se trocar experiência sobre GitOps e possui canais focados como argoworkflows, etc. Sugiro fortemente que entre no servidor, pois é uma boa oportunidade de trocar experiência com outros praticantes do <em>GitOps</em>.</p>\n<h3><a name=\"as-avalia%C3%A7%C3%B5es-e-dicas\" href=\"https://dev.to/marcpires/gitops-e-certificacoes-argocd-2dgd#as-avalia%C3%A7%C3%B5es-e-dicas\"></a>As avaliações e dicas</h3>\n<p>Ao final dos módulos há uma avaliação de múltipla escolha englobando os temas apresentados. Você precisa obter 85% nos testes para passar na avaliação, caso precise refazer o módulo, verifique o <em>Feedback report</em>, pois através dele, poderá verificar quais questões errou.</p>\n<p>Para encerrar deixo algumas dicas:</p>\n<ul>\n<li>\n<p>Faça os laboratórios dos módulos em seu cluster local - minikube, k3s, etc.</p>\n</li>\n<li>\n<p>Preste bastante atenção na parte de Sync Phase/hooks e Sync Waves, pois esses temas apresentam possibilidades interesantes.</p>\n</li>\n<li>\n<p>Caso tenha problemas em alguma parte. consulte a documentação do ArgoCD</p>\n</li>\n<li>\n<p>Interaja através dos Discord, a troca de experiência com outras pessoas irá enriquecer ainda mais os seus conhecimentos e a comunidade do ArgoCD é bem ativa.</p>\n</li>\n</ul>\n<p>Como vimos brevemente neste primeiro artigo da série, GitOps é uma forma poderosa de gerenciarmos clusters Kubernetes utilizando o Git como a fonte da verdade.</p>\n<p>Bom, é isso aí pessoal. Depois comentem aqui o que acharam do curso. Até o próximo artigo</p>",
            "image": "https://www.marcpires.dev/media/posts/5/argo.webp",
            "author": {
                "name": "Marc Pires"
            },
            "tags": [
                   "gitops"
            ],
            "date_published": "2025-06-03T15:02:26-03:00",
            "date_modified": "2025-06-03T15:24:35-03:00"
        },
        {
            "id": "https://www.marcpires.dev/mlops-do-experimento-a-producao/",
            "url": "https://www.marcpires.dev/mlops-do-experimento-a-producao/",
            "title": "MLOps - do experimento a produção",
            "content_html": "<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://www.marcpires.dev/media/posts/4/gallery/imagem_1.jpeg\" data-size=\"1200x1600\"><img loading=\"lazy\" src=\"https://www.marcpires.dev/media/posts/4/gallery/imagem_1-thumbnail.jpeg\" alt=\"\" width=\"768\" height=\"1024\"></a></figure>\n<figure class=\"gallery__item\"><a href=\"https://www.marcpires.dev/media/posts/4/gallery/WhatsApp-Image-2025-06-03-at-08.00.56.jpeg\" data-size=\"1200x1600\"><img loading=\"lazy\" src=\"https://www.marcpires.dev/media/posts/4/gallery/WhatsApp-Image-2025-06-03-at-08.00.56-thumbnail.jpeg\" alt=\"\" width=\"768\" height=\"1024\"></a></figure>\n</div></div>",
            "image": "https://www.marcpires.dev/media/posts/4/abstract-background-with-low-poly-design.jpg",
            "author": {
                "name": "Marc Pires"
            },
            "tags": [
                   "mlops",
                   "kubernetes"
            ],
            "date_published": "2025-06-03T15:01:16-03:00",
            "date_modified": "2025-06-03T15:22:31-03:00"
        },
        {
            "id": "https://www.marcpires.dev/automatic-changelog-with-git/",
            "url": "https://www.marcpires.dev/automatic-changelog-with-git/",
            "title": "CHANGELOG automático com git",
            "summary": "Know your hooks For Git novices that never dared to tap into the .git folder, there resides the hooks folder. Inside this folder, you'll find a series of scripts can be activated and will run on git actions, let's take a look. As you see for the&hellip;",
            "content_html": "<p><strong>Know your hooks</strong></p>\n<p>For Git novices that never dared to tap into the .git folder, there resides the <em>hooks</em> folder. Inside this folder, you'll find a series of scripts can be activated and will run on git actions, let's take a look.</p>\n<p> </p>\n<figure><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EtNw65Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AZjDNxMxwK6K515ack60QYg.png\" class=\"article-body-image-wrapper\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EtNw65Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AZjDNxMxwK6K515ack60QYg.png\" alt=\"\" loading=\"lazy\" data-is-external-image=\"true\"></a>\n<figcaption>Content of .git/hooks subfolder</figcaption>\n</figure>\n<p> </p>\n<p>As you see for the image above, there are bunch of <em>hooks</em> we can activate. Here some:</p>\n<p><strong>pre-push</strong> : This will always run, as its name implies, before a push. You can use this hook for example, to run all your tests before you send code to a remote.</p>\n<p><strong>pre-commit</strong> : Runs before a commit</p>\n<p><strong>The CHANGELOG hook</strong></p>\n<p>Know, let's go straight to the point.</p>\n<p>First create a <em>post</em>-commit file in the .git/hooks folder. The contents of my post-commit file is as follows.</p>\n<div class=\"ltag_gist-liquid-tag\"> </div>\n<p>The script is very simple, I do a git log with 3 parameters:</p>\n<p><strong>- -no-pager</strong> : Do not pipe Git output into a pager (less)<br><br><strong>- -no-merges:</strong> Does not print commits with more than one parent (same as max-parents=1)<br><br><strong>- -format</strong> : Pretty print the commit content in a specific format, possible values are ‘oneline’, ‘short’, ‘medium’, ‘full’, ‘fuller’, ‘email’, ‘raw’, ‘format:’ and ‘tformat:’</p>\n<p>The log output is then redirected do the <strong>CHANGELOG.md</strong> file on the project root folder.</p>\n<p>After saving the file, just do a <em>chmod +x .git/hooks/post-commit</em> and that's it. Now, always after the commit, your CHANGELOG.md will be updated.</p>\n<p>I hope you find it useful and does not forget to comment. 'till next tip.</p>\n<p>A imagem de capa deste artigo cortesia de<a href=\"&lt;a href=\" https:=\"\" www=\"\" freepik=\"\" com=\"\" free-photo=\"\" ai-site-helping-with-software-production_41673046=\"\" htm=\"\" fromview=\"search&amp;page=1&amp;position=17&amp;uuid=0729a974-70e3-4cc7-b976-46b438a4585c&amp;query=git&quot;\" imagem=\"\" cortesia=\"\" de=\"\" a=\"\">freepik</a></p>",
            "image": "https://www.marcpires.dev/media/posts/1/ai-site-helping-with-software-production.jpg",
            "author": {
                "name": "Marc Pires"
            },
            "tags": [
            ],
            "date_published": "2025-06-03T11:29:20-03:00",
            "date_modified": "2025-06-04T08:21:59-03:00"
        }
    ]
}
